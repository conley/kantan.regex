package kantan.regex

import kantan.codecs.laws._
import kantan.codecs.laws.CodecValue.{IllegalValue, LegalValue}
import kantan.regex.laws.{IllegalMatch, LegalMatch, MatchValue}
import kantan.regex.laws.discipline.MatchDecoderTests
import org.scalacheck.Arbitrary
import org.scalatest.FunSuite
import org.scalatest.prop.GeneratorDrivenPropertyChecks
import org.typelevel.discipline.scalatest.Discipline

class CaseClassDecoderTests extends FunSuite with GeneratorDrivenPropertyChecks with Discipline {
  [#case class Class1([#i1: Int#])
  implicit val decoder1: MatchDecoder[Class1] = MatchDecoder.decoder([#1#])(Class1.apply)
  implicit val arbLegalClass1 = kantan.regex.laws.discipline.arbitrary.arbLegalCaseClass1(Class1.apply)
  implicit val arbIllegalClass1 = kantan.regex.laws.discipline.arbitrary.arbIllegalCaseClass1[[#Int#], Class1]#

  ]

  [#checkAll("MatchDecoder[Class1]", MatchDecoderTests[Class1].decoder[Int, Int])#
  ]
}
